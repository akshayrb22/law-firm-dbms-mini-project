//This code was generated by a tool.
//Changes to this file will be lost if the code is regenerated.
// See the blog post here for help on using the generated code: http://erikej.blogspot.dk/2014/10/database-first-with-sqlite-in-universal.html
using MySql.Data.MySqlClient;
using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Collections.ObjectModel;

namespace LawFirmDBMS
{
	public class SqlDB
    {
		const string path = "server=127.0.0.1;user id=root;password=root;persistsecurityinfo=True;database=law_firm";
		MySqlConnection connection = new MySqlConnection(path);

		public SqlDB()
		{
			connection.Close();
		}

		public void InsertIntoLawyer(Lawyer lawyer)
        {
			try
			{
				string lawyerInsert = "INSERT INTO LAWYER(name, designation, billables, phone, password) VALUES(@name, @designation, @billables, @phone" +
					", @password)";
				MySqlCommand insert = new MySqlCommand(lawyerInsert, connection);
				insert.Parameters.AddWithValue("@name", lawyer.FullName);
				insert.Parameters.AddWithValue("@designation", lawyer.Designation);
				insert.Parameters.AddWithValue("@billables", lawyer.Billables);
				insert.Parameters.AddWithValue("@phone", lawyer.Phone);
				insert.Parameters.AddWithValue("@password", lawyer.Password);
				if (connection.State == System.Data.ConnectionState.Closed)
				{
					connection.Open();
				}
				insert.ExecuteNonQuery();
			}
			catch (Exception e)
			{
				Debug.WriteLine(e);
			}
			finally
			{
				if (connection.State == System.Data.ConnectionState.Open)
				{
					connection.Close();
				}
			}
		}
		public Lawyer GetLawyer(string password, string phoneNumber) 
		{
			Lawyer lawyer = new Lawyer();
			try
			{
				string getLawyerDetails = "SELECT * FROM LAWYER WHERE PHONE=@phone AND PASSWORD=@password;";
				if (connection.State == System.Data.ConnectionState.Closed)
				{
					connection.Open();
				}
				MySqlCommand command = new MySqlCommand(getLawyerDetails, connection);
				command.Parameters.AddWithValue("@phone", phoneNumber);
				command.Parameters.AddWithValue("@password", password);
				MySqlDataReader getLawyer = command.ExecuteReader();
				if (getLawyer.HasRows)
				{
					while (getLawyer.Read())
					{
						lawyer = new Lawyer
						{
							LawyerID = getLawyer.GetInt32(0),
							FullName = getLawyer.GetString(1),
							Designation = getLawyer.GetString(2),
							Billables = getLawyer.GetInt32(3),
							Phone = getLawyer.GetString(4),
							Password = getLawyer.GetString(5)
						};
					}
				}
				getLawyer.Close();
				return lawyer;
			}
			catch (Exception e)
			{
				Debug.WriteLine(e);
				return lawyer;
			}
			finally
			{
				if (connection.State == System.Data.ConnectionState.Open)
				{
					connection.Close();
				}
			}
		}

		public void InsertIntoCases(Case _case)
		{
			try
			{
				string caseInsert = "INSERT INTO CASES(status, hours_billed, title, courtroom_number, cl_id) VALUES(@status, " +
					"@hours_billed, @title, @courtroom_number, @cl_id);";
				MySqlCommand insert = new MySqlCommand(caseInsert, connection);
				insert.Parameters.AddWithValue("@status", _case.Status);
				insert.Parameters.AddWithValue("@hours_billed", _case.HoursBilled);
				insert.Parameters.AddWithValue("@title", _case.Title);
				insert.Parameters.AddWithValue("@courtroom_number", _case.CourtroomNumber);
				insert.Parameters.AddWithValue("@cl_id", _case.ClientID);
				if (connection.State == System.Data.ConnectionState.Closed)
				{
					connection.Open();
				}
				insert.ExecuteNonQuery();
			}
			catch (Exception e)
			{
				Debug.WriteLine(e);
			}
			finally
			{
				if (connection.State == System.Data.ConnectionState.Open)
				{
					connection.Close();
				}
			}
		}
		public List<Case> GetCases()
		{
			List<Case> caseList = new List<Case>();
			string getCases = "SELECT C.* FROM CASES AS C, HANDLES AS H WHERE H.l_id = @l_id AND H.case_id = C.case_id;";
			if (connection.State == System.Data.ConnectionState.Closed)
			{
				connection.Open();
			}
			MySqlCommand command = new MySqlCommand(getCases, connection);
			command.Parameters.AddWithValue("@l_id", LoggedInLawyer.Lawyer.LawyerID);
			MySqlDataReader cases = command.ExecuteReader();
			if (cases.HasRows)
			{
				while (cases.Read())
				{
					Case _case = new Case
					{
						CaseID = cases.GetInt32(0),
						Status = cases.GetString(1),
						HoursBilled = cases.GetInt32(2),
						ClientID = cases.GetInt32(3),
						CourtroomNumber = cases.GetString(4), 
						Title = cases.GetString(5)
					};
					caseList.Add(_case);
				}
			}
			cases.Close();
			if (connection.State == System.Data.ConnectionState.Open)
			{
				connection.Close();
			}
			return caseList;
		}
		public Case GetCase(Case _case)
		{
			string getCase = "SELECT * FROM CASES WHERE title = @title;";
			if (connection.State == System.Data.ConnectionState.Closed)
			{
				connection.Open();
			}
			MySqlCommand command = new MySqlCommand(getCase, connection);
			command.Parameters.AddWithValue("@title", _case.Title);
			MySqlDataReader reader = command.ExecuteReader();
			if (reader.HasRows)
			{
				while (reader.Read())
				{
					_case.CaseID = reader.GetInt32(0);
				}
			}
			reader.Close();
			if (connection.State == System.Data.ConnectionState.Open)
			{
				connection.Close();
			}
			return _case;
		}
		public void DeleteFromCases(int caseID)
		{
			try
			{
				string caseDelete = "DELETE FROM CASES WHERE case_id = @case_id;";
				MySqlCommand delete = new MySqlCommand(caseDelete, connection);
				delete.Parameters.AddWithValue("@case_id", caseID);
				if (connection.State == System.Data.ConnectionState.Closed)
				{
					connection.Open();
				}
				delete.ExecuteNonQuery();
				if (connection.State == System.Data.ConnectionState.Open)
				{
					connection.Close();
				}
			}
			catch (Exception e)
			{
				Debug.WriteLine(e);
				throw;
			}
		}
		public void UpdateCases(Case _case)
		{
			try
			{
				string caseUpdate = "UPDATE CASES SET STATUS = @status, HOURS_BILLED = " +
					"@hours_billed, CL_ID = @cl_id, COURTROOM_NUMBER = @courtroom_number WHERE " +
					"CASE_ID = @case_id;";
				MySqlCommand update = new MySqlCommand(caseUpdate, connection);
				update.Parameters.AddWithValue("@status", _case.Status);
				update.Parameters.AddWithValue("@hours_billed", _case.HoursBilled);
				update.Parameters.AddWithValue("@cl_id", _case.ClientID);
				update.Parameters.AddWithValue("@courtroom_number", _case.CourtroomNumber);
				update.Parameters.AddWithValue("@case_id", _case.CaseID);
				if (connection.State == System.Data.ConnectionState.Closed)
				{
					connection.Open();
				}
				update.ExecuteNonQuery();
				if (connection.State == System.Data.ConnectionState.Open)
				{
					connection.Close();
				}
			}
			catch (Exception e)
			{
				Debug.WriteLine(e);
				throw;
			}
		}

		public void InsertIntoClient(Client client)
		{
			try
			{
				string caseInsert = "INSERT INTO CLIENT(cl_id, name, phone) VALUES(@cl_id, @name, @phone);";
				MySqlCommand insert = new MySqlCommand(caseInsert, connection);
				insert.Parameters.AddWithValue("@cl_id", client.ClientID);
				insert.Parameters.AddWithValue("@name", client.FullName);
				insert.Parameters.AddWithValue("@phone", client.Phone);
				if (connection.State == System.Data.ConnectionState.Closed)
				{
					connection.Open();
				}
				insert.ExecuteNonQuery();
				if (connection.State == System.Data.ConnectionState.Open)
				{
					connection.Close();
				}
			}
			catch (Exception e)
			{
				Debug.WriteLine(e);
			}
		}
		public List<Client> GetClients()
		{
			List<Client> clientList = new List<Client>();
			string getClients = "SELECT CL.* FROM CLIENT AS CL, COUNSELS AS CO WHERE CO.l_id = @l_id AND CO.cl_id = CL.cl_id ;";
			if (connection.State == System.Data.ConnectionState.Closed)
			{
				connection.Open();
			}
			MySqlCommand command = new MySqlCommand(getClients, connection);
			command.Parameters.AddWithValue("@l_id", LoggedInLawyer.Lawyer.LawyerID);
			MySqlDataReader clients = command.ExecuteReader();
			if (clients.HasRows)
			{
				while(clients.Read())
				{
					Client client = new Client
					{
						ClientID = clients.GetInt32(0),
						FullName = clients.GetString(1),
						Phone = clients.GetString(2)
					};
					clientList.Add(client);
				}
			}
			clients.Close();
			if (connection.State == System.Data.ConnectionState.Open)
			{
				connection.Close();
			}
			return clientList;

		}
		public Client GetClient(Client client)
		{
			string getClient = "SELECT * FROM CLIENT WHERE name = @name AND phone = @phone;";
			if (connection.State == System.Data.ConnectionState.Closed)
			{
				connection.Open();
			}
			MySqlCommand command = new MySqlCommand(getClient, connection);
			command.Parameters.AddWithValue("@name", client.FullName);
			command.Parameters.AddWithValue("@phone", client.Phone);
			MySqlDataReader reader = command.ExecuteReader();
			if (reader.HasRows)
			{
				while (reader.Read())
				{
					client.ClientID = reader.GetInt32(0);
				}
				
			}
			reader.Close();
			if (connection.State == System.Data.ConnectionState.Open)
			{
				connection.Close();
			}
			return client;
		}
		public void DeleteFromClient(int clientID)
		{
			try
			{
				string clientDelete = "DELETE FROM CLIENT WHERE cl_id = @cl_id;";
				MySqlCommand delete = new MySqlCommand(clientDelete, connection);
				delete.Parameters.AddWithValue("@cl_id", clientID);
				if (connection.State == System.Data.ConnectionState.Closed)
				{
					connection.Open();
				}
				delete.ExecuteNonQuery();
				if (connection.State == System.Data.ConnectionState.Open)
				{
					connection.Close();
				}
			}
			catch (Exception e)
			{
				Debug.WriteLine(e);
				throw;
			}
		}
		public void UpdateClients(Client client)
		{
			try
			{
				string clientUpdate = "UPDATE CLIENT SET NAME = @name, PHONE = @phone WHERE CL_ID = @cl_id;";
				MySqlCommand update = new MySqlCommand(clientUpdate, connection);
				update.Parameters.AddWithValue("@name", client.FullName);
				update.Parameters.AddWithValue("@phone", client.Phone);
				update.Parameters.AddWithValue("@cl_id", client.ClientID);
				if (connection.State == System.Data.ConnectionState.Closed)
				{
					connection.Open();
				}
				update.ExecuteNonQuery();
				if (connection.State == System.Data.ConnectionState.Open)
				{
					connection.Close();
				}
			}
			catch (Exception e)
			{
				Debug.WriteLine(e);
				throw;
			}

		}

		public void InsertIntoParalegal(Paralegal paralegal)
		{
			try
			{
				string paralegalInsert = "INSERT INTO PARALEGALS(p_id, name, phone) VALUES(@p_id, @name, @phone);";
				MySqlCommand insert = new MySqlCommand(paralegalInsert, connection);
				insert.Parameters.AddWithValue("@p_id", paralegal.PID);
				insert.Parameters.AddWithValue("@name", paralegal.FullName);
				insert.Parameters.AddWithValue("@phone", paralegal.Phone);
				if (connection.State == System.Data.ConnectionState.Closed)
				{
					connection.Open();
				}
				insert.ExecuteNonQuery();
				if (connection.State == System.Data.ConnectionState.Open)
				{
					connection.Close();
				}
			}
			catch (Exception e)
			{
				Debug.WriteLine(e);
				throw;
			}
		}
		public List<Paralegal> GetParalegals()
		{
			List<Paralegal> paralegalList = new List<Paralegal>();
			string getParalegals = "SELECT * FROM PARALEGALS;";
			connection.Open();
			MySqlCommand command = new MySqlCommand(getParalegals, connection);
			MySqlDataReader paralegals = command.ExecuteReader();
			if (paralegals.HasRows)
			{
				while (paralegals.Read())
				{
					Paralegal paralegal = new Paralegal
					{
						PID = paralegals.GetInt32(0), 
						Phone = paralegals.GetString(1), 
						FullName = paralegals.GetString(2)
					};
					paralegalList.Add(paralegal);
				}
			}
			paralegals.Close();
			if (connection.State == System.Data.ConnectionState.Open)
			{
				connection.Close();
			}
			return paralegalList;
		}
		public void DeleteFromParalegal(int paralegalID)
		{
			try
			{
				string paralegalDelete = "DELETE FROM PARALEGALS WHERE p_id = @p_id;";
				MySqlCommand delete = new MySqlCommand(paralegalDelete, connection);
				delete.Parameters.AddWithValue("@p_id", paralegalID);
				if (connection.State == System.Data.ConnectionState.Closed)
				{
					connection.Open();
				}
				delete.ExecuteNonQuery();
				if (connection.State == System.Data.ConnectionState.Open)
				{
					connection.Close();
				}
			}
			catch (Exception e)
			{
				Debug.WriteLine(e);
				throw;
			}
			
		}
		public void UpdateParalegals(Paralegal paralegal)
		{
			try
			{
				string paralegalUpdate = "UPDATE PARALEGALS SET PHONE = @phone, NAME = @name WHERE P_ID = @p_id;";
				MySqlCommand update = new MySqlCommand(paralegalUpdate, connection);
				update.Parameters.AddWithValue("@name", paralegal.FullName);
				update.Parameters.AddWithValue("@phone", paralegal.Phone);
				update.Parameters.AddWithValue("@p_id", paralegal.PID);
				if (connection.State == System.Data.ConnectionState.Closed)
				{
					connection.Open();
				}
				update.ExecuteNonQuery();
				if (connection.State == System.Data.ConnectionState.Open)
				{
					connection.Close();
				}
			}
			catch (Exception e)
			{
				Debug.WriteLine(e);
				throw;
			}
		}

		public void InsertIntoCaseRecords(CaseRecord caseRecord)
		{
			try
			{
				string caseRecordInsert = "INSERT INTO CASE_RECORD(doc_id, case_id, p_id) VALUES(@doc_id, @case_id, @p_id);";
				MySqlCommand insert = new MySqlCommand(caseRecordInsert, connection);
				insert.Parameters.AddWithValue("@doc_id", caseRecord.DocID);
				insert.Parameters.AddWithValue("@case_id", caseRecord.CaseID);
				insert.Parameters.AddWithValue("@p_id", caseRecord.PID);
				if (connection.State == System.Data.ConnectionState.Closed)
				{
					connection.Open();
				}
				insert.ExecuteNonQuery();
				if (connection.State == System.Data.ConnectionState.Open)
				{
					connection.Close();
				}
			}
			catch (Exception e)
			{
				Debug.WriteLine(e);
				throw;
			}
		}
		public List<CaseRecord> GetCaseRecords()
		{
			List<CaseRecord> recordsList = new List<CaseRecord>();
			string getRecords = "SELECT * FROM CASE_RECORDS;";
			if (connection.State == System.Data.ConnectionState.Closed)
			{
				connection.Open();
			}
			MySqlCommand command = new MySqlCommand(getRecords, connection);
			MySqlDataReader records = command.ExecuteReader();
			if (records.HasRows)
			{
				while (records.Read())
				{
					CaseRecord caseRecord = new CaseRecord
					{
						DocID = records.GetInt32(0),
						CaseID = records.GetInt32(1),
						PID = records.GetInt32(2)
					};
					recordsList.Add(caseRecord);
				}
			}
			records.Close();
			if (connection.State == System.Data.ConnectionState.Open)
			{
				connection.Close();
			}
			return recordsList;
		}
		public void DeleteFromCaseRecord(int docID)
		{
			try
			{
				string recordDelete = "DELETE FROM CASE_RECORD WHERE doc_id = @doc_id;";
				MySqlCommand delete = new MySqlCommand(recordDelete, connection);
				delete.Parameters.AddWithValue("@doc_id", docID);
				if (connection.State == System.Data.ConnectionState.Closed)
				{
					connection.Open();
				}
				delete.ExecuteNonQuery();
				if (connection.State == System.Data.ConnectionState.Open)
				{
					connection.Close();
				}
			}
			catch (Exception e)
			{
				Debug.WriteLine(e);
				throw;
			}

		}
		public void UpdateCaseRecord(CaseRecord caseRecord)
		{
			try
			{
				string caseRecordUpdate = "UPDATE CASE_RECORD SET CASE_ID = @case_id, P_ID = @p_id WHERE DOC_ID = @doc_id;";
				MySqlCommand update = new MySqlCommand(caseRecordUpdate, connection);
				update.Parameters.AddWithValue("@case_id", caseRecord.CaseID);
				update.Parameters.AddWithValue("@p_id", caseRecord.PID);
				update.Parameters.AddWithValue("@doc_id", caseRecord.DocID);
				if (connection.State == System.Data.ConnectionState.Closed)
				{
					connection.Open();
				}
				update.ExecuteNonQuery();
				if (connection.State == System.Data.ConnectionState.Open)
				{
					connection.Close();
				}
			}
			catch (Exception e)
			{
				Debug.WriteLine(e);
				throw;
			}
		}

		public List<MixedBag> GetDocDetails()
		{
			List<string> namesList = new List<string>();
			List<MixedBag> mixedBagList = new List<MixedBag>();
			MySqlCommand retrieveDocDetails = new MySqlCommand("DOC_DETAILS", connection)
			{
				CommandType = System.Data.CommandType.StoredProcedure
			};
			if (connection.State == System.Data.ConnectionState.Closed)
			{
				connection.Open();
			}
			MySqlDataReader details = retrieveDocDetails.ExecuteReader();
			if (details.HasRows)
			{
				while (details.Read())
				{
					MixedBag mixedBag = new MixedBag
					{
						ParalegalName = details.GetString(0),
						Phone = details.GetString(1), 
						DocID = details.GetInt32(2),
						PID = details.GetInt32(3),
						CaseID = details.GetInt32(4)
					};
					mixedBagList.Add(mixedBag);
				}
			}
			details.Close();
			if (connection.State == System.Data.ConnectionState.Open)
			{
				connection.Close();
			}
			return mixedBagList;
		}

		public void InsertIntoCounsels(Client client)
		{
			try
			{
				string counselsInsert = "INSERT INTO COUNSELS(l_id, cl_id) VALUES(@l_id, @cl_id)";
				MySqlCommand insert = new MySqlCommand(counselsInsert, connection);
				insert.Parameters.AddWithValue("@l_id", LoggedInLawyer.Lawyer.LawyerID);
				insert.Parameters.AddWithValue("@cl_id", client.ClientID);
				if (connection.State == System.Data.ConnectionState.Closed)
				{
					connection.Open();
				}
				insert.ExecuteNonQuery();
				if (connection.State == System.Data.ConnectionState.Open)
				{
					connection.Close();
				}
			}
			catch (Exception e)
			{
				Debug.WriteLine(e);
			}
		}

		public void InsertIntoHandles(Case _case)
		{
			try
			{
				string handlesInsert = "INSERT INTO HANDLES(l_id, case_id) VALUES(@l_id, @case_id)";
				MySqlCommand insert = new MySqlCommand(handlesInsert, connection);
				insert.Parameters.AddWithValue("@l_id", LoggedInLawyer.Lawyer.LawyerID);
				insert.Parameters.AddWithValue("@case_id", _case.CaseID);
				if (connection.State == System.Data.ConnectionState.Closed)
				{
					connection.Open();
				}
				insert.ExecuteNonQuery();
				if (connection.State == System.Data.ConnectionState.Open)
				{
					connection.Close();
				}
			}
			catch (Exception e)
			{
				Debug.WriteLine(e);
			}
		}
	}

	public class Lawyer
	{
		public int LawyerID { get; set; }

		public string FullName { get; set; }

		public string Designation { get; set; }

		public string Phone { get; set; }

		public string Password { get; set; }

		public int Billables { get; set; }

	}

	public class Client
	{
		public int ClientID { get; set; }

		public string FullName { get; set; }

		public string Phone { get; set; }
	}

	public class Case
	{
		public int CaseID { get; set; }

		public string Status { get; set; }

		public int HoursBilled { get; set; }

		public int ClientID { get; set; }

		public string CourtroomNumber { get; set; }

		public string Title { get; set; }
	}

	public class Paralegal
	{
		public int PID { get; set; }

		public string Phone { get; set; }

		public string FullName { get; set; }
	}

	public class CaseRecord
	{
		public int DocID { get; set; }

		public int CaseID { get; set; }

		public int PID { get; set; }
	}

	public class PassingBag
	{

		public CaseRecord CaseRecord { get; set; }

		public Paralegal Paralegal { get; set; }

		public Lawyer Lawyer { get; set; }

		public SqlDB Db { get; set; }

		public Client Client { get; set; }

		public Case _case { get; set; }

		public PassingBag(Lawyer lawyer, SqlDB db)
		{
			this.Lawyer = lawyer;
			this.Db = db;
		}

		public PassingBag(Client client)
		{
			this.Client = client;
		}

		public PassingBag(Case _case)
		{
			this._case = _case;
		}

		public PassingBag(CaseRecord caseRecord, Paralegal paralegal)
		{
			this.CaseRecord = caseRecord;
			this.Paralegal = paralegal;
		}

		public PassingBag(Lawyer lawyer)
		{
			Lawyer = lawyer;
		}
	}

	public class MixedBag
	{
		public int DocID { get; set; }

		public int CaseID { get; set; }

		public int PID { get; set; }

		public string ParalegalName { get; set; }

		public string Phone { get; set; }

		public Paralegal Paralegal
		{
			get
			{
				return Paralegal;
			}

			set
			{
				Paralegal.PID = PID;
				Paralegal.Phone = Phone;
				Paralegal.FullName = ParalegalName;
			}
		}

		public CaseRecord CaseRecord
		{
			get
			{
				return CaseRecord;
			}

			set
			{
				CaseRecord.CaseID = CaseID;
				CaseRecord.DocID = DocID;
				CaseRecord.PID = PID;
			}
		}
	}

	public static class LoggedInLawyer
	{
		public static Lawyer Lawyer { get; set; }

		public static bool LoggedIn { get; set; }
	}
}
